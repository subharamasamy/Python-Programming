List:

A list contains items separated by commas and enclosed within square brackets ([]). 
To some extent, lists are similar to arrays in C. 
One difference between them is that all the items belonging to a list can be of different data type.

List is a collection which is ordered and changeable. Allows duplicate members.

The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. 
The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator.

>>> a=[1,"hello",10.56,1111111111,'s',45.78907654]
>>> b=["hello",10.2,"python"]
>>> print(a)
[1, 'hello', 10.56, 1111111111, 's', 45.78907654]
>>> print(b)
['hello', 10.2, 'python']
>>> print(a[0:1])
[1]
>>> print(a[0:3])
[1, 'hello', 10.56]
>>> print(a[0:3] + b[0:2])
[1, 'hello', 10.56, 'hello', 10.2]
>>> print(a[3:] + b[1:3])
[1111111111, 's', 45.78907654, 10.2, 'python']
>>> print(b * 2)
['hello', 10.2, 'python', 'hello', 10.2, 'python']


Updating lists:
Update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator, 
and can add to elements in a list with the append() method.

>>> a=[2000,"hello"]
>>> print (a[0])
2000
>>> print (a[1])
hello
>>> print (a[0:2])
[2000, 'hello']
>>> a[0]=5000
>>> print (a[0:2])
[5000, 'hello']


Delete List Elements:
To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or 
the remove() method if you do not know.

>>> a=[2000,"hello"]
>>> print(a[0:2])
[2000, 'hello']
>>> del a[0]
>>> print(a[0:2])
['hello']


Loop Through a List:
a=[5000,"python","hello",56.78,7.88888]
for x in a:
	print(x)
  
output:
5000
python
hello
56.78
7.88888

Check if Item Exists:
To determine if a specified item is present in a list use the in keyword
a=[5000,"python","hello",56.78,7.88888]
if 5000 in a:
	print("Yes")
else:
	print("No")

Output:
Yes


List Length:
Displays the count

a=[5000,"python","hello",56.78,7.88888]
print(len(a))

output:
5

append() method:
//Add Items
To add an item to the end of the list, use the append() method

a=[5000,"python","hello",56.78,7.88888]
a.append("checking")
print(a)

output:
[5000, 'python', 'hello', 56.78, 7.88888, 'checking']

To add an item at the specified index, use the insert() method:

a=[5000,"python","hello",56.78,7.88888]
a.insert(1,"heypython")
print(a)

output:
[5000, 'heypython', 'python', 'hello', 56.78, 7.88888]


Remove Item:
Several methods to remove items from a list. removes specified item

a=[5000,"python","hello",56.78,7.88888]
a.remove("python")
a.remove(5000)
print(a)

output:
['hello', 56.78, 7.88888]

pop() method:
The pop() method removes the specified index, (or the last item if index is not specified)

a=[5000,"python","hello",56.78,7.88888]
a.pop(2)
print(a)

output:
[5000, 'python', 56.78, 7.88888]


del keyword:
The del keyword removes the specified index:
The del keyword can also delete the list completely


a=[5000,"python","hello",56.78,7.88888]
del a[0]
print(a)

output:
['python', 'hello', 56.78, 7.88888]

clear() method:
The clear() method empties the list

a=[5000,"python","hello",56.78,7.88888]
a.clear()
print(a)

output:
[]


Tuples:
A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.

a=(5000,"python","hello",56.78,7.88888)
b=("hey")
print(a)
print(a[0])
print(a[1])
print(a[2:5])
print(b * 3)
print("python" + b)

output:
(5000, 'python', 'hello', 56.78, 7.88888)
5000
python
('hello', 56.78, 7.88888)
heyheyhey
pythonhey

Change Tuple Values:
Once a tuple is created, you cannot change its values. Tuples are unchangeable.

Add Items
Once a tuple is created, you cannot add items to it. Tuples are unchangeable.

Remove Items
Note: You cannot remove items in a tuple.
Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely

Loop Through a Tuples:
a=(5000,"python","hello",56.78,7.88888)
for x in a:
	print(x)
  
output:
5000
python
hello
56.78
7.88888

Check if Item Exists:
To determine if a specified item is present in a list use the in keyword
a=(5000,"python","hello",56.78,7.88888)
if 5000 in a:
	print("Yes")
else:
	print("No")

Output:
Yes


List Length:
Displays the count

a=(5000,"python","hello",56.78,7.88888)
print(len(a))

output:
5


Set:

A set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.

a={5000,"python","hello",56.78,7.88888}
print(a)

output:
{'hello', 5000, 7.88888, 'python', 56.78}

Note from above output : Sets are unordered, so the items will appear in a random order.

Access Items:
You cannot access items in a set by referring to an index, since sets are unordered the items has no index.
But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.

Using for loop:

a={5000,"python","hello",56.78,7.88888}

for x in a:
	print(x)

output:
hello
5000
7.88888
python
56.78

Check if Item Exists:
To determine if a specified item is present in a list use the in keyword

a={5000,"python","hello",56.78,7.88888}

if "python" in a:
	print("Yes")
else:
	print("No")


Change items:
once a set is created , not supposed to change . but we can add or update items.

a= {"hello" , "hai"}
print(a)
a.add("hai hello")
print(a)
a.update(["python" , "python1"])
print(a)

o/p:
{'hello', 'hai'}       
{'hai hello', 'hello', 'hai'}
{'hello', 'python1', 'python', 'hai hello', 'hai'}  

--> Length of a set
--> Remove() or discard() method  // If the item to remove does not exist, discard() will NOT raise an error.

pop() method to remove an item, but this method will remove the last item. 
Since the sets are unordered, so you will not know what item that gets removed.

--> Clear() method
--> del keyword

a= {"hello" , "hai" ,"python","test","haihello"}
print(len(a))
a.remove("hai")
print(a)
a.discard("test")
print(a)
a.clear()
print(a)
b={"a","c","d"}
print(b)
del b
print(b)  // it will throw error, b does not exist

o/p:
5
{'test', 'hello', 'haihello', 'python'}
{'hello', 'haihello', 'python'}
set()
{'a', 'c', 'd'}
Traceback (most recent call last):
  File "list.txt", line 12, in <module>
    print(b)
NameError: name 'b' is not defined

set() constructor to make a set:

Set Methods
Python has a set of built-in methods that you can use on sets.
add()
Adds an element to the set
clear()
Removes all the elements from the set
copy()
Returns a copy of the set
difference()
Returns a set containing the difference between two or more sets
difference_update()
Removes the items in this set that are also included in another, specified set
discard()
Remove the specified item
intersection()
Returns a set, that is the intersection of two other sets
intersection_update()
Removes the items in this set that are not present in other, specified set(s)
isdisjoint()
Returns whether two sets have a intersection or not
issubset()
Returns whether another set contains this set or not
issuperset()
Returns whether this set contains another set or not
pop()
Removes an element from the set
remove()
Removes the specified element
symmetric_difference()
Returns a set with the symmetric differences of two sets
symmetric_difference_update()
inserts the symmetric differences from this set and another
union()
Return a set containing the union of sets
update()
Update the set with the union of this set and others

Dictionaries:
A dictionary is a collection which is unordered, changeable and indexed. 
In Python dictionaries are written with curly brackets, and they have keys and values.

a={"marks":123,"rank":23,"address":"chennai"}
print (a)

o/p:
{'marks': 123, 'rank': 23, 'address': 'chennai'} 

Accessing items by refering with key name:

a={"marks":123,"rank":23,"address":"chennai"}
b=a["marks"],a["rank"]
print (b)

o/p:
(123, 23)

->Change values
->Dictionary length
->Adding items
->Removing items - pop() method removes the items - popitem() method removes last inserted items
->delete items - using del keyword to delete

a={"marks":123,"rank":23,"address":"chennai"}
a["marks"]=321
print (a)
print(len(a))
a["num"]=43253
print (a)
print(len(a))
a.pop("rank")
print (a)
print(len(a))
del a["num"]
print (a)
del a
print(a)

o/p:
{'marks': 321, 'rank': 23, 'address': 'chennai'}
3
{'marks': 321, 'rank': 23, 'address': 'chennai', 'num': 43253}
4
{'marks': 321, 'address': 'chennai', 'num': 43253}
3
{'marks': 321, 'address': 'chennai'}
Traceback (most recent call last):
  File "dict.txt", line 14, in <module>
    print(a)
NameError: name 'a' is not defined



-> clear method
a={"marks":123,"rank":23,"address":"chennai"}
a.clear()
print (a)

o/p:
{}

-> Copy a dictionary
a={"marks":123,"rank":23,"address":"chennai"}
b=a.copy()
print (b)

o/p:
{'marks': 123, 'rank': 23, 'address': 'chennai'}

-> loop through a dictionary
Print all key names in the dictionary, one by one:
a={"marks":123,"rank":23,"address":"chennai"}
for list in a:
	print(list)
	
o/p:
marks
rank
address

Print all values in the dictionary, one by one:

a={"marks":123,"rank":23,"address":"chennai"}
for list in a:
	print(a[list])
	
o/p:
123
23
chennai

Loop through both keys and values, by using the items() function:

a={"marks":123,"rank":23,"address":"chennai"}
for key,value in a.items():
	print(key,value)

o/p:
marks 123
rank 23
address chennai


Check if Key exists:
a={"marks":123,"rank":23,"address":"chennai"}
if "marks" in a:
	print("yes")
else:
	print("no")
	
o/p:
yes



















