
Functions:
A function is a block of code which only runs when it is called. Supposed to pass data known as parameters, into a function.
A function can return data as a result as well as used defined functions(Supposed to create by own functions)

How to define a function:
1. Function blockbegins with keyword def and followed by function name and parantheses.
2. Code block within function starts with a colon(:)

Basic Example:

def testing(str):
	print (str);
def simple(addr,age):
	print(addr,age);
def add(a,b):
	print(a+b);

testing("hai hello")
testing("Welcome testers")
simple("west chennai",20)
add(2,3)

O/P:
hai hello
Welcome testers
west chennai 20
5


Pass by Reference:
if you change what a parameter refers to within a function, the change also reflects back in the calling function.

def value(check):
	check.append([8,9,0])		//callee
	print(check)

check=[1,2,3,4,5]
value(check)              //calling function / caller
print(check)

o/p:
[1, 2, 3, 4, 5, [8, 9, 0]]
[1, 2, 3, 4, 5, [8, 9, 0]]


Pass by Value:
we pass copy of actual variables in function as a parameter. Hence any modification on parameters inside the function will 
not reflect in the actual variable.

def value(check):
	check=[8,9,0]
	print(check)

check=[1,2,3,4,5]
value(check)
print(check)
	
o/p:
[8, 9, 0]
[1, 2, 3, 4, 5]

Lambda:
A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.

Syntax
lambda arguments : expression

x=lambda a : a + 40
print(x(10))

y=lambda a, b, c : a + b * c
print(y(1,2,3))

o/p:
50
7

Why Use Lambda Functions?
The power of lambda is better shown when you use them as an anonymous function inside another function.
Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number

def myfunc(n):
  return lambda a : a * n 

Eg:
def lamb(x):
	return lambda a : a * x

test = lamb(3)
test1= lamb(4)

print(test(4))
print(test1(6))

o/p:
12
24



Array:
Arrays are used to store multiple values in one single variable:
Note: Python does not have built-in support for Arrays, but Python Lists can be used instead.


arr=["data","science","status"]
print(arr[0])
print(arr[1])
arr.append("check")
print(arr)
print(arr[3])
print(len(arr))
arr.pop(1)
print(arr)
arr.remove("data")		//The remove() method only remove the specified value.
print(arr)

o/p:
data
science
['data', 'science', 'status', 'check']
check
4
['data', 'status', 'check']
['status', 'check']


Method
Description
append()
Adds an element at the end of the list
clear()
Removes all the elements from the list
copy()
Returns a copy of the list
count()
Returns the number of elements with the specified value
extend()
Add the elements of a list (or any iterable), to the end of the current list
index()
Returns the index of the first element with the specified value
insert()
Adds an element at the specified position
pop()
Removes the element at the specified position
remove()
Removes the first item with the specified value
reverse()
Reverses the order of the list
sort()
Sorts the list
