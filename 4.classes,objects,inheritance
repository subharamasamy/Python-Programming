Classes and Objects:

class test:    //class classname
	x=5

a=test()       //object creation, a is object 
store = a.x   
print(store)

o/p:
5

The __init__() Function: class constructor or initialization method or python constructor
built-in __init__() function.
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations 
that are necessary to do when the object is being created.


You declare other class methods like normal functions with the exception that the first argument to each method is self. 
Python adds the self argument to the list for you; you do not need to include it when you call the methods.

class details:
	def __init__(self,age,name):
		self.age=name;
		self.name=age;

a=details("25" , "subha")

print(a.age)
print(a.name)


o/p:
subha
25

Note: The __init__() function is called automatically every time the class is being used to create a new object.

class details:
	def __init__(self,age,name):
		self.age=name;
		self.name=age;
	def checking(abc):
		print("hai hello" + abc.age)

a=details("25" , "subha")

print(a.age)
print(a.name)

a.checking()


o/p:
subha
25
hai hellosubha

Delete object properties:

class details:
	def __init__(self,age,name):
		self.age=name;
		self.name=age;
	def checking(abc):
		print("hai hello" + abc.age)

a=details("25" , "subha")

print(a.age)
print(a.name)

a.checking()
del a
a.checking()

o/p:
subha
25
hai hellosubha
Traceback (most recent call last):
  File "list.txt", line 15, in <module>
    a.checking()
NameError: name 'a' is not defined

Python in build class functions:

getattr(obj,name,default) - It is used to access the attribute of the object.
setattr(obj, name,value) - It is used to set a particular value to the specific attribute of an object.
delattr(obj, name) - It is used to delete a specific attribute.
hasattr(obj, name) - It returns true if the object contains some specific attribute.

class details:
	def __init__(self,age,name):
		self.age=name;
		self.name=age;
	def checking(abc):
		print("hai hello" + abc.age)

a=details("25" , "subha")

print(a.age)
print(a.name)

a.checking()

print(getattr(a,'name'))
setattr(a , "age" , 40)
print(getattr(a,'age'))

print(hasattr(a,'age'))
print(hasattr(a,'id'))
delattr(a, 'age')
print(a.age)

o/p:
subha
25
hai hellosubha
25
40
True
False
Traceback (most recent call last):
  File "list.txt", line 22, in <module>
    print(a.age)
AttributeError: 'details' object has no attribute 'age'

Destroying Objects (Garbage Collection):
Python deletes unneeded objects (built-in types or class instances) automatically to free the memory space. 
The process by which Python periodically reclaims blocks of memory that no longer are in use is termed Garbage Collection.
Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero. 
The object's reference count decreases when it's deleted with del, its reference is reassigned, or its reference goes out of scope. 
When an object's reference count reaches zero, Python collects it automatically.


Inheritance:
Inheritance allows us to define a class that inherits all the methods and properties from another class.
Parent class is the class being inherited from, also called base class.
Child class is the class that inherits from another class, also called derived class


